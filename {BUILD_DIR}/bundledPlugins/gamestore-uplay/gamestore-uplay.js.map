{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,0BAAU;AAClC,aAAa,mBAAO,CAAC,kBAAM;AAC3B,eAAe,mBAAO,CAAC,wCAAiB;AACxC,qBAAqB,mBAAO,CAAC,8BAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,oBAAoB;AAChG;AACA;AACA;AACA;AACA,wEAAwE,4CAA4C;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,MAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe","sources":["webpack://gamestore-uplay/external commonjs2 \"bluebird\"","webpack://gamestore-uplay/external commonjs2 \"path\"","webpack://gamestore-uplay/external commonjs2 \"vortex-api\"","webpack://gamestore-uplay/external commonjs2 \"winapi-bindings\"","webpack://gamestore-uplay/webpack/bootstrap","webpack://gamestore-uplay/./src/index.ts"],"sourcesContent":["module.exports = require(\"bluebird\");","module.exports = require(\"path\");","module.exports = require(\"vortex-api\");","module.exports = require(\"winapi-bindings\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Promise = require(\"bluebird\");\nconst path = require(\"path\");\nconst winapi = require(\"winapi-bindings\");\nconst vortex_api_1 = require(\"vortex-api\");\nconst STORE_ID = 'uplay';\nconst STORE_NAME = 'Uplay';\nconst STORE_PRIORITY = 55;\nconst UPLAY_EXEC = 'Uplay.exe';\nconst REG_UPLAY_INSTALLS = 'SOFTWARE\\\\WOW6432Node\\\\Ubisoft\\\\Launcher\\\\Installs';\nconst REG_UPLAY_NAME_LOCATION = 'SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\Uplay Install ';\nclass UPlayLauncher {\n    constructor() {\n        this.id = STORE_ID;\n        this.name = STORE_NAME;\n        this.priority = STORE_PRIORITY;\n        if (process.platform === 'win32') {\n            try {\n                const uplayPath = winapi.RegGetValue('HKEY_LOCAL_MACHINE', 'SOFTWARE\\\\WOW6432Node\\\\Ubisoft\\\\Launcher', 'InstallDir');\n                this.mClientPath = Promise.resolve(path.join(uplayPath.value, UPLAY_EXEC));\n            }\n            catch (err) {\n                (0, vortex_api_1.log)('info', 'uplay launcher not found', { error: err.message });\n                this.mClientPath = undefined;\n            }\n        }\n        else {\n            (0, vortex_api_1.log)('info', 'uplay launcher not found', { error: 'only available on Windows systems' });\n            this.mClientPath = undefined;\n        }\n    }\n    launchGame(appInfo, api) {\n        return this.getPosixPath(appInfo)\n            .then(posPath => vortex_api_1.util.opn(posPath).catch(err => Promise.resolve()));\n    }\n    getPosixPath(appId) {\n        const posixPath = `uplay://launch/${appId}/0`;\n        return Promise.resolve(posixPath);\n    }\n    allGames() {\n        if (!this.mCache) {\n            this.mCache = this.getGameEntries();\n        }\n        return this.mCache;\n    }\n    reloadGames() {\n        return new Promise((resolve) => {\n            this.mCache = this.getGameEntries();\n            return resolve();\n        });\n    }\n    findByName(appName) {\n        const re = new RegExp('^' + appName + '$');\n        return this.allGames()\n            .then(entries => entries.find(entry => re.test(entry.name)))\n            .then(entry => (entry === undefined)\n            ? Promise.reject(new vortex_api_1.types.GameEntryNotFound(appName, STORE_ID))\n            : Promise.resolve(entry));\n    }\n    findByAppId(appId) {\n        const matcher = Array.isArray(appId)\n            ? (entry) => (appId.includes(entry.appid))\n            : (entry) => (appId === entry.appid);\n        return this.allGames()\n            .then(entries => {\n            const gameEntry = entries.find(matcher);\n            if (gameEntry === undefined) {\n                return Promise.reject(new vortex_api_1.types.GameEntryNotFound(Array.isArray(appId) ? appId.join(', ') : appId, STORE_ID));\n            }\n            else {\n                return Promise.resolve(gameEntry);\n            }\n        });\n    }\n    getGameStorePath() {\n        return (!!this.mClientPath)\n            ? this.mClientPath.then(basePath => path.join(basePath, 'Uplay.exe'))\n            : Promise.resolve(undefined);\n    }\n    getGameEntries() {\n        return (this.mClientPath === undefined)\n            ? Promise.resolve([])\n            : new Promise((resolve, reject) => {\n                try {\n                    winapi.WithRegOpen('HKEY_LOCAL_MACHINE', REG_UPLAY_INSTALLS, hkey => {\n                        let keys = [];\n                        try {\n                            keys = winapi.RegEnumKeys(hkey);\n                        }\n                        catch (err) {\n                            (0, vortex_api_1.log)('error', 'gamestore-uplay: registry query failed', hkey);\n                            return resolve([]);\n                        }\n                        const gameEntries = keys.map(key => {\n                            try {\n                                const gameEntry = {\n                                    appid: key.key,\n                                    gamePath: winapi.RegGetValue(hkey, key.key, 'InstallDir').value,\n                                    name: winapi.RegGetValue('HKEY_LOCAL_MACHINE', REG_UPLAY_NAME_LOCATION + key.key, 'DisplayName').value,\n                                    gameStoreId: STORE_ID,\n                                };\n                                return gameEntry;\n                            }\n                            catch (err) {\n                                (0, vortex_api_1.log)('info', 'gamestore-uplay: registry query failed', key.key);\n                                return undefined;\n                            }\n                        });\n                        return resolve(gameEntries.filter(entry => !!entry));\n                    });\n                }\n                catch (err) {\n                    return (err.code === 'ENOENT') ? resolve([]) : reject(err);\n                }\n            });\n    }\n}\nfunction main(context) {\n    const instance = process.platform === 'win32' ? new UPlayLauncher() : undefined;\n    if (instance !== undefined) {\n        context.registerGameStore(instance);\n    }\n    return true;\n}\nexports.default = main;\n"],"names":[],"sourceRoot":""}